# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Agent {
  id: ID!
  name: String
  description: String
  type: String
  config: JSON
  isEnabled: Boolean
  lastHeartbeat: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input AgentWhereUniqueInput {
  id: ID
}

input AgentWhereInput {
  AND: [AgentWhereInput!]
  OR: [AgentWhereInput!]
  NOT: [AgentWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  type: StringNullableFilter
  isEnabled: BooleanFilter
  lastHeartbeat: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AgentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  type: OrderDirection
  isEnabled: OrderDirection
  lastHeartbeat: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AgentUpdateInput {
  name: String
  description: String
  type: String
  config: JSON
  isEnabled: Boolean
  lastHeartbeat: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input AgentUpdateArgs {
  where: AgentWhereUniqueInput!
  data: AgentUpdateInput!
}

input AgentCreateInput {
  name: String
  description: String
  type: String
  config: JSON
  isEnabled: Boolean
  lastHeartbeat: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type McpServer {
  id: ID!
  name: String
  command: String
  description: String
  isEnabled: Boolean
  timeout: Int
  maxRetries: Int
  lastHeartbeat: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input McpServerWhereUniqueInput {
  id: ID
}

input McpServerWhereInput {
  AND: [McpServerWhereInput!]
  OR: [McpServerWhereInput!]
  NOT: [McpServerWhereInput!]
  id: IDFilter
  name: StringFilter
  command: StringFilter
  description: StringFilter
  isEnabled: BooleanFilter
  timeout: IntNullableFilter
  maxRetries: IntNullableFilter
  lastHeartbeat: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input McpServerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  command: OrderDirection
  description: OrderDirection
  isEnabled: OrderDirection
  timeout: OrderDirection
  maxRetries: OrderDirection
  lastHeartbeat: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input McpServerUpdateInput {
  name: String
  command: String
  description: String
  isEnabled: Boolean
  timeout: Int
  maxRetries: Int
  lastHeartbeat: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input McpServerUpdateArgs {
  where: McpServerWhereUniqueInput!
  data: McpServerUpdateInput!
}

input McpServerCreateInput {
  name: String
  command: String
  description: String
  isEnabled: Boolean
  timeout: Int
  maxRetries: Int
  lastHeartbeat: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type ComfyTool {
  id: ID!
  name: String
  description: String
  workflowDefinition: String
  workflowParameters(where: ComfyToolParameterWhereInput! = {}, orderBy: [ComfyToolParameterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComfyToolParameterWhereUniqueInput): [ComfyToolParameter!]
  workflowParametersCount(where: ComfyToolParameterWhereInput! = {}): Int
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ComfyToolWhereUniqueInput {
  id: ID
  name: String
}

input ComfyToolWhereInput {
  AND: [ComfyToolWhereInput!]
  OR: [ComfyToolWhereInput!]
  NOT: [ComfyToolWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  workflowDefinition: StringFilter
  workflowParameters: ComfyToolParameterManyRelationFilter
  isEnabled: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ComfyToolParameterManyRelationFilter {
  every: ComfyToolParameterWhereInput
  some: ComfyToolParameterWhereInput
  none: ComfyToolParameterWhereInput
}

input ComfyToolOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  workflowDefinition: OrderDirection
  isEnabled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ComfyToolUpdateInput {
  name: String
  description: String
  workflowDefinition: String
  workflowParameters: ComfyToolParameterRelateToManyForUpdateInput
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ComfyToolParameterRelateToManyForUpdateInput {
  disconnect: [ComfyToolParameterWhereUniqueInput!]
  set: [ComfyToolParameterWhereUniqueInput!]
  create: [ComfyToolParameterCreateInput!]
  connect: [ComfyToolParameterWhereUniqueInput!]
}

input ComfyToolUpdateArgs {
  where: ComfyToolWhereUniqueInput!
  data: ComfyToolUpdateInput!
}

input ComfyToolCreateInput {
  name: String
  description: String
  workflowDefinition: String
  workflowParameters: ComfyToolParameterRelateToManyForCreateInput
  isEnabled: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input ComfyToolParameterRelateToManyForCreateInput {
  create: [ComfyToolParameterCreateInput!]
  connect: [ComfyToolParameterWhereUniqueInput!]
}

type ComfyToolParameter {
  id: ID!
  name: String
  description: String
  dataType: String
  prop: String
  isRequired: Boolean
  min: Int
  max: Int
  defaultValue: String
  comfyTool: ComfyTool
}

input ComfyToolParameterWhereUniqueInput {
  id: ID
}

input ComfyToolParameterWhereInput {
  AND: [ComfyToolParameterWhereInput!]
  OR: [ComfyToolParameterWhereInput!]
  NOT: [ComfyToolParameterWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  dataType: StringFilter
  prop: StringFilter
  isRequired: BooleanFilter
  min: IntNullableFilter
  max: IntNullableFilter
  defaultValue: StringFilter
  comfyTool: ComfyToolWhereInput
}

input ComfyToolParameterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  dataType: OrderDirection
  prop: OrderDirection
  isRequired: OrderDirection
  min: OrderDirection
  max: OrderDirection
  defaultValue: OrderDirection
}

input ComfyToolParameterUpdateInput {
  name: String
  description: String
  dataType: String
  prop: String
  isRequired: Boolean
  min: Int
  max: Int
  defaultValue: String
  comfyTool: ComfyToolRelateToOneForUpdateInput
}

input ComfyToolRelateToOneForUpdateInput {
  create: ComfyToolCreateInput
  connect: ComfyToolWhereUniqueInput
  disconnect: Boolean
}

input ComfyToolParameterUpdateArgs {
  where: ComfyToolParameterWhereUniqueInput!
  data: ComfyToolParameterUpdateInput!
}

input ComfyToolParameterCreateInput {
  name: String
  description: String
  dataType: String
  prop: String
  isRequired: Boolean
  min: Int
  max: Int
  defaultValue: String
  comfyTool: ComfyToolRelateToOneForCreateInput
}

input ComfyToolRelateToOneForCreateInput {
  create: ComfyToolCreateInput
  connect: ComfyToolWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createAgent(data: AgentCreateInput!): Agent
  createAgents(data: [AgentCreateInput!]!): [Agent]
  updateAgent(where: AgentWhereUniqueInput!, data: AgentUpdateInput!): Agent
  updateAgents(data: [AgentUpdateArgs!]!): [Agent]
  deleteAgent(where: AgentWhereUniqueInput!): Agent
  deleteAgents(where: [AgentWhereUniqueInput!]!): [Agent]
  createMcpServer(data: McpServerCreateInput!): McpServer
  createMcpServers(data: [McpServerCreateInput!]!): [McpServer]
  updateMcpServer(where: McpServerWhereUniqueInput!, data: McpServerUpdateInput!): McpServer
  updateMcpServers(data: [McpServerUpdateArgs!]!): [McpServer]
  deleteMcpServer(where: McpServerWhereUniqueInput!): McpServer
  deleteMcpServers(where: [McpServerWhereUniqueInput!]!): [McpServer]
  createComfyTool(data: ComfyToolCreateInput!): ComfyTool
  createComfyTools(data: [ComfyToolCreateInput!]!): [ComfyTool]
  updateComfyTool(where: ComfyToolWhereUniqueInput!, data: ComfyToolUpdateInput!): ComfyTool
  updateComfyTools(data: [ComfyToolUpdateArgs!]!): [ComfyTool]
  deleteComfyTool(where: ComfyToolWhereUniqueInput!): ComfyTool
  deleteComfyTools(where: [ComfyToolWhereUniqueInput!]!): [ComfyTool]
  createComfyToolParameter(data: ComfyToolParameterCreateInput!): ComfyToolParameter
  createComfyToolParameters(data: [ComfyToolParameterCreateInput!]!): [ComfyToolParameter]
  updateComfyToolParameter(where: ComfyToolParameterWhereUniqueInput!, data: ComfyToolParameterUpdateInput!): ComfyToolParameter
  updateComfyToolParameters(data: [ComfyToolParameterUpdateArgs!]!): [ComfyToolParameter]
  deleteComfyToolParameter(where: ComfyToolParameterWhereUniqueInput!): ComfyToolParameter
  deleteComfyToolParameters(where: [ComfyToolParameterWhereUniqueInput!]!): [ComfyToolParameter]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  agent(where: AgentWhereUniqueInput!): Agent
  agents(where: AgentWhereInput! = {}, orderBy: [AgentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AgentWhereUniqueInput): [Agent!]
  agentsCount(where: AgentWhereInput! = {}): Int
  mcpServer(where: McpServerWhereUniqueInput!): McpServer
  mcpServers(where: McpServerWhereInput! = {}, orderBy: [McpServerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: McpServerWhereUniqueInput): [McpServer!]
  mcpServersCount(where: McpServerWhereInput! = {}): Int
  comfyTool(where: ComfyToolWhereUniqueInput!): ComfyTool
  comfyTools(where: ComfyToolWhereInput! = {}, orderBy: [ComfyToolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComfyToolWhereUniqueInput): [ComfyTool!]
  comfyToolsCount(where: ComfyToolWhereInput! = {}): Int
  comfyToolParameter(where: ComfyToolParameterWhereUniqueInput!): ComfyToolParameter
  comfyToolParameters(where: ComfyToolParameterWhereInput! = {}, orderBy: [ComfyToolParameterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComfyToolParameterWhereUniqueInput): [ComfyToolParameter!]
  comfyToolParametersCount(where: ComfyToolParameterWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
